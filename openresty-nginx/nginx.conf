worker_processes  1;
error_log /dev/stderr warn;

events {
    worker_connections 1024;
}


http {

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /dev/stdout main;

    lua_package_path "/usr/local/openresty/lualib/?.lua;;";

    server {
        # config tls authentication on port 8001
        listen 8001 ssl;

        #attach cfssl certificate
        ssl_certificate      /server.pem;
        ssl_certificate_key  /server-key.pem;

        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_session_cache shared:SSL:1m;
        ssl_session_timeout 5m;

        location / {
            default_type text/html;
            content_by_lua '
                ngx.say("<p>hello, unprotected lua world</p>")
            ';
        }

        # serving static content - pdf 
        location /static/ {
            alias /usr/local/openresty/static/;
            default_type application/pdf;
        }

        # return all pdf data in database
        location /showall {
            # config cors for complex request
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Headers' '*';
            add_header 'Access-Control-Allow-Methods' '*';

            access_by_lua_block {
                local db = require("db")
                db.select()
            }

            default_type application/json;
        }

        # return pdf data which matched provide arguments 
        location /search {
            # config cors for complex request
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Headers' '*';
            add_header 'Access-Control-Allow-Methods' '*';
            
            access_by_lua_block {
                local db = require("db")
                db.query(ngx.req.get_uri_args())
            }
            
            default_type application/json;
        }

    }
}
